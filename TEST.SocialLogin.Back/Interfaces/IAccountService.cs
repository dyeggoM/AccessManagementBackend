using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;
using TEST.SocialLogin.Back.Entities;

namespace TEST.SocialLogin.Back.Interfaces
{
    public interface IAccountService
    {
        /// <summary>
        /// This method validates if the token received from Facebook was generated by the application.
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        Task<ConfigExternalProviderDataDTO> ValidateFacebookToken(DTOExternalProviderLogin model);
        /// <summary>
        /// This method validates if the token received from Google was generated by the application.
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        Task<ConfigExternalProviderDataDTO> ValidateGoogleToken(DTOExternalProviderLogin model);
        /// <summary>
        /// This method generates a Bearer token to authenticate a logged user.
        /// </summary>
        /// <param name="user"></param>
        /// <returns></returns>
        string GenerateToken(ApplicationUser user);
        /// <summary>
        /// This method generates a random refresh token.
        /// </summary>
        /// <returns></returns>
        string GenerateRefreshToken();
        /// <summary>
        /// This method is used to retrieve the user information from an expired token.
        /// </summary>
        /// <param name="token"></param>
        /// <returns></returns>
        ClaimsPrincipal GetPrincipalFromExpiredToken(string token);
        /// <summary>
        /// This method sends a verification email to the user.
        /// </summary>
        /// <param name="user"></param>
        /// <returns></returns>
        Task<bool> SendEmailConfirmationToken(ApplicationUser user);
        /// <summary>
        /// Validates captcha
        /// </summary>
        /// <param name="token">Captcha token</param>
        /// <returns></returns>
        Task<bool> ValidateRecaptcha(string token);
        /// <summary>
        /// Validates existence of a user by its username
        /// </summary>
        /// <param name="userName">UserName to check.</param>
        /// <returns></returns>
        Task<bool> ValidateUserExistsByUserName(string userName);
        /// <summary>
        /// Validates existence of a user by its email
        /// </summary>
        /// <param name="email">Email to check.</param>
        /// <returns></returns>
        Task<bool> ValidateUserExistsByEmail(string email);
        /// <summary>
        /// Get user by its email
        /// </summary>
        /// <param name="email">User Email.</param>
        /// <param name="user">User found.</param>
        /// <returns></returns>
        bool GetUserByEmail(string email, out ApplicationUser user);
        /// <summary>
        /// Generates a hashed reset token for the specified user.
        /// </summary>
        /// <param name="user">User to generate reset token.</param>
        /// <returns></returns>
        Task<string> GenerateHashResetToken(ApplicationUser user);
        /// <summary>
        /// Creates a new user with the specified password and email.
        /// </summary>
        /// <param name="email">User email.</param>
        /// <param name="password">User password.</param>
        /// <param name="user">User generated.</param>
        /// <returns></returns>
        bool CreateUser(string email, string password, out ApplicationUser user);
        /// <summary>
        /// Confirms user email is being used.
        /// </summary>
        /// <param name="user">User to confirm.</param>
        /// <param name="confirmationToken">Confirmation Token.</param>
        /// <returns></returns>
        Task<bool> ConfirmUserEmail(ApplicationUser user, string confirmationToken);
        /// <summary>
        /// Validates if user has confirmed email.
        /// </summary>
        /// <param name="user">User to validate.</param>
        /// <returns></returns>
        Task<bool> ValidateUserEmailIsConfirmed(ApplicationUser user);
        /// <summary>
        /// Validates if user has being locked out.
        /// </summary>
        /// <param name="user">User to validate.</param>
        /// <returns></returns>
        Task<bool> ValidateUserIsLockedOut(ApplicationUser user);
        /// <summary>
        /// Logs in a user
        /// </summary>
        /// <param name="user">User to login.</param>
        /// <param name="password">User password.</param>
        /// <param name="refreshToken">User Refresh token.</param>
        /// <returns></returns>
        bool LoginUser(ApplicationUser user, string password, out string refreshToken);
        /// <summary>
        /// Increments access fail count of user.
        /// </summary>
        /// <param name="user">User that failed to access.</param>
        /// <returns></returns>
        Task<bool> FailsUserAccess(ApplicationUser user);
        /// <summary>
        /// Resets user password.
        /// </summary>
        /// <param name="user">User to modify password.</param>
        /// <param name="hashedResetToken">Hashed reset token.</param>
        /// <param name="newPassword">New user password.</param>
        /// <returns></returns>
        Task<bool> ResetUserPassword(ApplicationUser user, string hashedResetToken, string newPassword);
    }
}
